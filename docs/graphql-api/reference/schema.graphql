schema {
  query: Query
  mutation: Mutation
}

scalar JSON
scalar ISO8601DateTime
directive @adminRequired on FIELD_DEFINITION

type Query {
  """
  Fetch notifications
  List of notifications that belong to a user. Notifications are sorted in descendent order by the <code>sentAt</code> timestamp.

  The user is identified by the HTTP authentication headers.
  """
  notifications(
    "Returns the elements that come after the specified cursor."
    after: String

    "Returns the elements that come before the specified cursor."
    before: String

    "Returns the first n elements. Defaults to 50. The maximum accepted value is 50."
    first: Int

    "Returns the last n elements."
    last: Int

    "Filters based on the read state. If false, only unread notifications will be returned. Defaults to null."
    read: Boolean

    "Filters based on the seen state. If false, only unseen notifications will be returned. Defaults to null."
    seen: Boolean

    "Filters based on the archived state. If false, only unarchived notifications will be returned. Defaults to null."
    archived: Boolean

    "Filters based on the category a notification belongs to. If you want to get uncategorized notifications, use the \"uncategorized\" value.\nThe value can be either an array of strings or a comma-separated string."
    categories: [String!]

    "Filters based on the topic a notification belongs to."
    topics: [String!]

    "Filters based on whether a notification was sent to the notification inbox (in-app channel) or not. Defaults to true."
    inApp: String
  ): NotificationsConnection

  """
  Fetch users
  List of users that belong to your project.

  The project is determined by the HTTP authentication headers.
  """
  users(
    "Returns the elements that come after the specified cursor."
    after: String

    "Returns the elements that come before the specified cursor."
    before: String

    "Returns the first n elements. Defaults to 50."
    first: Int

    "Returns the last n elements."
    last: Int

    "Filters based on the stored attributes of users. The string is expected to be an SQL-like expression."
    matches: String
  ): UsersConnection @adminRequired

  """
  Fetch categories
  List of categories that belong to your project.

  The project is determined by the HTTP authentication headers.
  """
  categories(
    "Returns the elements that come after the specified cursor."
    after: String

    "Returns the elements that come before the specified cursor."
    before: String

    "Returns the first n elements. Defaults to 50."
    first: Int

    "Returns the last n elements."
    last: Int
  ): CategoriesConnection @adminRequired

  """
  Fetch logs

  List of logged activity related to notifications you created with the MagicBell API, either using the REST API or the GraphQL API.

  The project is determined by the HTTP authentication headers.
  """
  logs(
    "Returns the elements that come after the specified cursor."
    after: String

    "Returns the elements that come before the specified cursor"
    before: String

    "Returns the first n elements. Defaults to 50. The maximum accepted value is 50."
    first: Int

    "Returns the last n elements."
    last: Int

    "filters based on the attributes of the recipient of a notification."
    user: UserFilter

    "Filters based on the notification attributes."
    notification: NotificationFilter

    "Filters based on the channel a notification belongs to."
    channels: [String!]
  ): DeliveryLogConnection @adminRequired
  """
  Fetch subscriptions
  List of subscription records that belong to your project.

  The project is determined by the HTTP authentication headers.
  """
  subscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionsConnection @adminRequired
}

type Mutation {
  " TODO: THIS IS A LIE, REPLACE ME!!!! "
  createSubscription(input: CreateSubscriptionInput!): CreateSubscriptionPayload!
}

"""
Autogenerated input type of CreateSubscription
"""
input CreateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  label: String
  slug: String
  topic: String
}

type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!

  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!

  "When paginating backwards, the cursor to continue."
  startCursor: String

  "When paginating forwards, the cursor to continue"
  endCursor: String
}

type NotificationsConnection {
  "Total number of notifications for this user"
  totalCount: Int!

  "Total number of unread notifications"
  unreadCount: Int!

  "Total number of unseen notifications"
  unseenCount: Int!

  "A list of edges."
  edges: [NotificationsEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo!
}

type NotificationsEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: Notification
}

type Notification {
  id: ID!
  title: String!
  content: String
  actionUrl: String
  category: String
  topic: String
  customAttributes: JSON
  sentAt: ISO8601DateTime!
  readAt: ISO8601DateTime
  seenAt: ISO8601DateTime
  archivedAt: ISO8601DateTime
}

type SubscriptionsConnection {
  "Total number of subscriptions"
  totalCount: Int!

  "A list of edges."
  edges: [SubscriptionsEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo!
}

type SubscriptionsEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: Subscription
}

type Subscription {
  id: ID!
  label: String
  slug: String!
  topic: String!
}

type UsersConnection {
  "Total number of users."
  totalCount: Int!

  "A list of edges."
  edges: [UsersEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo!
}

type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: User
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  externalId: String
  customAttributes: JSON
  phoneNumbers: JSON
  notifications: NotificationsConnection
  lastSignInIp: String
  lastSeenAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
}

input UserFilter {
  "User's email"
  email: String

  "User's external ID"
  externalId: String

  "User's ID"
  id: ID
}

input NotificationFilter {
  "Notification ID"
  id: ID

  "Notification Title"
  title: String
}

type DeliveryLogConnection {
  "A list of edges."
  edges: [DeliveryLogEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo!
}

type DeliveryLogEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: DeliveryLog
}

type DeliveryLog {
  id: ID!
  notification: Notification!
  user: User!
  channel: String!
  data: JSON
  request: JSON
  response: JSON
  createdAt: ISO8601DateTime!
}

type CategoriesConnection {
  "Total number of categories for the project"
  totalCount: Int!

  "A list of edges."
  edges: [CategoriesEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo!
}

type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: Category
}

type Category {
  id: ID!
  label: String
  slug: String!
  userCanConfigure: Boolean!
  overrideChannelsConfig: Boolean!
  channels: Channel!
  createdAt: ISO8601DateTime!
}

type Channel {
  id: ID!
  label: String!
  slug: String!
  configuration: ChannelConfiguration!
}

type ChannelConfiguration {
  delay: Int
  position: Int
  enabled: Boolean
  dontDeliverIf: Int
}

type ValidationError {
  location: [String!]
  message: String!
}

type CreateSubscriptionPayload {
  clientMutationId: String
  errors: [ValidationError!]
  subscription: Subscription
}
